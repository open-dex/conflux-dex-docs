{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conflux DEX is a decentralized exchange infrastructure based on Conflux, which is made up of BoomFlow and MatchFlow . BoomFlow is set of smart contracts on Conflux chain for user assets management and trade settlement. MatchFlow is an order book based matching engine, which provides REST APIs for users to place/cancel orders.","title":"Welcome to Conflux DEX"},{"location":"boomflow/","text":"Welcome to BoomFlow BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authorized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authorized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authority to access these contracts. Javascript SDK There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Introduction"},{"location":"boomflow/#welcome-to-boomflow","text":"BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authorized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authorized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authority to access these contracts.","title":"Welcome to BoomFlow"},{"location":"boomflow/#javascript-sdk","text":"There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Javascript SDK"},{"location":"matchflow/","text":"Welcome to MatchFlow MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively. Environments API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net. Change Logs 2020/04/17 Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception. 2020/04/09 Server migrate to Tokyo region. System optimization. 2020/03/26 New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields 2020/03/11 New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address 2020/03/06 New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"Introduction"},{"location":"matchflow/#welcome-to-matchflow","text":"MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively.","title":"Welcome to MatchFlow"},{"location":"matchflow/#environments","text":"API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net.","title":"Environments"},{"location":"matchflow/#change-logs","text":"","title":"Change Logs"},{"location":"matchflow/#20200417","text":"Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception.","title":"2020/04/17"},{"location":"matchflow/#20200409","text":"Server migrate to Tokyo region. System optimization.","title":"2020/04/09"},{"location":"matchflow/#20200326","text":"New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields","title":"2020/03/26"},{"location":"matchflow/#20200311","text":"New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address","title":"2020/03/11"},{"location":"matchflow/#20200306","text":"New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"2020/03/06"},{"location":"matchflow/eip712/","text":"Why EIP712 To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow . General Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 . EIP712 Domain Primary type: EIP712Domain Boomflow Domain NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow CRCL Domain NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program. Place Order Domain: Boomflow Domain Primary type: Order Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip Cancel Order Domain: Boomflow Domain Primary type: CancelRequest Schema NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp Withdraw Domain: CRCL Domain Primary type: WithdrawRequest Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp Transfer Domain: CRCL Domain Primary type: TransferRequest Schema NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"EIP712 Signature"},{"location":"matchflow/eip712/#why-eip712","text":"To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow .","title":"Why EIP712"},{"location":"matchflow/eip712/#general","text":"Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 .","title":"General"},{"location":"matchflow/eip712/#eip712-domain","text":"Primary type: EIP712Domain","title":"EIP712 Domain"},{"location":"matchflow/eip712/#boomflow-domain","text":"NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow","title":"Boomflow Domain"},{"location":"matchflow/eip712/#crcl-domain","text":"NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program.","title":"CRCL Domain"},{"location":"matchflow/eip712/#place-order","text":"Domain: Boomflow Domain Primary type: Order","title":"Place Order"},{"location":"matchflow/eip712/#schema","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip","title":"Schema"},{"location":"matchflow/eip712/#cancel-order","text":"Domain: Boomflow Domain Primary type: CancelRequest","title":"Cancel Order"},{"location":"matchflow/eip712/#schema_1","text":"NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp","title":"Schema"},{"location":"matchflow/eip712/#withdraw","text":"Domain: CRCL Domain Primary type: WithdrawRequest","title":"Withdraw"},{"location":"matchflow/eip712/#schema_2","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp","title":"Schema"},{"location":"matchflow/eip712/#transfer","text":"Domain: CRCL Domain Primary type: TransferRequest","title":"Transfer"},{"location":"matchflow/eip712/#schema_3","text":"NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"Schema"},{"location":"matchflow/frontend/","text":"If you want to develop a decentralized exchange (DEX) on Conflux chain, MatchFlow is a good choice for you to quickly get start. Why MatchFlow MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching. Migrate from CEX MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders. EIP712 Signature Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"Frontend Integration"},{"location":"matchflow/frontend/#why-matchflow","text":"MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching.","title":"Why MatchFlow"},{"location":"matchflow/frontend/#migrate-from-cex","text":"MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders.","title":"Migrate from CEX"},{"location":"matchflow/frontend/#eip712-signature","text":"Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"EIP712 Signature"},{"location":"matchflow/market_maker/","text":"A market maker can easily interact with MatchFlow via REST API and WebSocket API . Firstly, please refer to the document to add a new account in Conflux DEX. After that, market maker could call REST APIs to place orders or cancel orders . Unlike centralized exchanges, Conflux DEX requires EIP712 based user signature to place an order. Accordingly, market maker need to follow the type schema to sign place/cancel order request.","title":"Market Maker"},{"location":"matchflow/reg_user/","text":"Unlike the centralized exchange, Conflux DEX do not require user to register an account via REST API in MatchFlow. Because, Conflux DEX is a decentralized exchange and user assets are all locked in smart contracts on Conflux chain. User need to interact with CRC-L contract for user registration in Conflux DEX. Add User When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit. API The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"User Registration"},{"location":"matchflow/reg_user/#add-user","text":"When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit.","title":"Add User"},{"location":"matchflow/reg_user/#api","text":"The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"API"},{"location":"matchflow/ws/","text":"MatchFlow WebSocket API MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes. General Websocket URL ws://${conflux_dex_url}/ws Heartbeat and Connection Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed. Subscribe to Topic To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics. Unsubscribe To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false } Topic Response Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic. Market Data Best Bid/Offer Topic market.$product.bbo Update Content public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; } Market Depth Topic market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels. Update Content { \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; } Market Details in Last 24 Hours Topic market.$product.detail Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Market Tick Topic market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month. Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Trade Detail Topic market.$product.trade.detail Update Content public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; } Asset and Order Account Updates Topic accounts Arguments address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed. Update Content public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; } Order Updates Topic order.$product $product : product name or * for all products. Arguments address : user address. Update Content public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; } Trade Details Topic trade.$product $product : product name or * for all products. Arguments address : user address. Update Content public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"WebSocket API"},{"location":"matchflow/ws/#matchflow-websocket-api","text":"MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes.","title":"MatchFlow WebSocket API"},{"location":"matchflow/ws/#general","text":"","title":"General"},{"location":"matchflow/ws/#websocket-url","text":"ws://${conflux_dex_url}/ws","title":"Websocket URL"},{"location":"matchflow/ws/#heartbeat-and-connection","text":"Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed.","title":"Heartbeat and Connection"},{"location":"matchflow/ws/#subscribe-to-topic","text":"To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics.","title":"Subscribe to Topic"},{"location":"matchflow/ws/#unsubscribe","text":"To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false }","title":"Unsubscribe"},{"location":"matchflow/ws/#topic-response","text":"Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic.","title":"Topic Response"},{"location":"matchflow/ws/#market-data","text":"","title":"Market Data"},{"location":"matchflow/ws/#best-bidoffer","text":"","title":"Best Bid/Offer"},{"location":"matchflow/ws/#topic","text":"market.$product.bbo","title":"Topic"},{"location":"matchflow/ws/#update-content","text":"public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; }","title":"Update Content"},{"location":"matchflow/ws/#market-depth","text":"","title":"Market Depth"},{"location":"matchflow/ws/#topic_1","text":"market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels.","title":"Topic"},{"location":"matchflow/ws/#update-content_1","text":"{ \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; }","title":"Update Content"},{"location":"matchflow/ws/#market-details-in-last-24-hours","text":"","title":"Market Details in Last 24 Hours"},{"location":"matchflow/ws/#topic_2","text":"market.$product.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_2","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#market-tick","text":"","title":"Market Tick"},{"location":"matchflow/ws/#topic_3","text":"market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month.","title":"Topic"},{"location":"matchflow/ws/#update-content_3","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#trade-detail","text":"","title":"Trade Detail"},{"location":"matchflow/ws/#topic_4","text":"market.$product.trade.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_4","text":"public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; }","title":"Update Content"},{"location":"matchflow/ws/#asset-and-order","text":"","title":"Asset and Order"},{"location":"matchflow/ws/#account-updates","text":"","title":"Account Updates"},{"location":"matchflow/ws/#topic_5","text":"accounts","title":"Topic"},{"location":"matchflow/ws/#arguments","text":"address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed.","title":"Arguments"},{"location":"matchflow/ws/#update-content_5","text":"public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; }","title":"Update Content"},{"location":"matchflow/ws/#order-updates","text":"","title":"Order Updates"},{"location":"matchflow/ws/#topic_6","text":"order.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_1","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_6","text":"public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; }","title":"Update Content"},{"location":"matchflow/ws/#trade-details","text":"","title":"Trade Details"},{"location":"matchflow/ws/#topic_7","text":"trade.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_2","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_7","text":"public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"Update Content"}]}